//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FubarDev.WebDavServer.Properties {
    using System;
    using System.Reflection;
    
    
    /// <summary>
    ///   Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
    /// </summary>
    // Diese Klasse wurde von der StronglyTypedResourceBuilder automatisch generiert
    // -Klasse über ein Tool wie ResGen oder Visual Studio automatisch generiert.
    // Um einen Member hinzuzufügen oder zu entfernen, bearbeiten Sie die .ResX-Datei und führen dann ResGen
    // mit der /str-Option erneut aus, oder Sie erstellen Ihr VS-Projekt neu.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("FubarDev.WebDavServer.Properties.Resources", typeof(Resources).GetTypeInfo().Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
        ///   Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Array lengths must be the same. ähnelt.
        /// </summary>
        internal static string Arg_ArrayLengthsDiffer {
            get {
                return ResourceManager.GetString("Arg_ArrayLengthsDiffer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Destination array is not long enough to copy all the items in the collection. Check array index and length. ähnelt.
        /// </summary>
        internal static string Arg_ArrayPlusOffTooSmall {
            get {
                return ResourceManager.GetString("Arg_ArrayPlusOffTooSmall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Only supported array types for CopyTo on BitArrays are Boolean[], Int32[] and Byte[]. ähnelt.
        /// </summary>
        internal static string Arg_BitArrayTypeUnsupported {
            get {
                return ResourceManager.GetString("Arg_BitArrayTypeUnsupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die HashSet capacity is too big. ähnelt.
        /// </summary>
        internal static string Arg_HSCapacityOverflow {
            get {
                return ResourceManager.GetString("Arg_HSCapacityOverflow", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Hashtable&apos;s capacity overflowed and went negative. Check load factor, capacity and the current size of the table. ähnelt.
        /// </summary>
        internal static string Arg_HTCapacityOverflow {
            get {
                return ResourceManager.GetString("Arg_HTCapacityOverflow", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Insufficient space in the target location to copy the information. ähnelt.
        /// </summary>
        internal static string Arg_InsufficientSpace {
            get {
                return ResourceManager.GetString("Arg_InsufficientSpace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Multi dimension array is not supported on this operation. ähnelt.
        /// </summary>
        internal static string Arg_MultiRank {
            get {
                return ResourceManager.GetString("Arg_MultiRank", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The lower bound of target array must be zero. ähnelt.
        /// </summary>
        internal static string Arg_NonZeroLowerBound {
            get {
                return ResourceManager.GetString("Arg_NonZeroLowerBound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Only single dimensional arrays are supported for the requested action. ähnelt.
        /// </summary>
        internal static string Arg_RankMultiDimNotSupported {
            get {
                return ResourceManager.GetString("Arg_RankMultiDimNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The value &apos;{0}&apos; is not of type &apos;{1}&apos; and cannot be used in this generic collection. ähnelt.
        /// </summary>
        internal static string Arg_WrongType {
            get {
                return ResourceManager.GetString("Arg_WrongType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die An item with the same key has already been added. ähnelt.
        /// </summary>
        internal static string Argument_AddingDuplicate {
            get {
                return ResourceManager.GetString("Argument_AddingDuplicate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The input array length must not exceed Int32.MaxValue / {0}. Otherwise BitArray.Length would exceed Int32.MaxValue. ähnelt.
        /// </summary>
        internal static string Argument_ArrayTooLarge {
            get {
                return ResourceManager.GetString("Argument_ArrayTooLarge", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die At least one object must implement IComparable. ähnelt.
        /// </summary>
        internal static string Argument_ImplementIComparable {
            get {
                return ResourceManager.GetString("Argument_ImplementIComparable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Type of argument is not compatible with the generic comparer. ähnelt.
        /// </summary>
        internal static string Argument_InvalidArgumentForComparison {
            get {
                return ResourceManager.GetString("Argument_InvalidArgumentForComparison", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Target array type is not compatible with the type of items in the collection. ähnelt.
        /// </summary>
        internal static string Argument_InvalidArrayType {
            get {
                return ResourceManager.GetString("Argument_InvalidArrayType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Offset and length were out of bounds for the array or count is greater than the number of elements from index to the end of the source collection. ähnelt.
        /// </summary>
        internal static string Argument_InvalidOffLen {
            get {
                return ResourceManager.GetString("Argument_InvalidOffLen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Larger than collection size. ähnelt.
        /// </summary>
        internal static string ArgumentOutOfRange_BiggerThanCollection {
            get {
                return ResourceManager.GetString("ArgumentOutOfRange_BiggerThanCollection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Count must be positive and count must refer to a location within the string/array/collection. ähnelt.
        /// </summary>
        internal static string ArgumentOutOfRange_Count {
            get {
                return ResourceManager.GetString("ArgumentOutOfRange_Count", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Index was out of range. Must be non-negative and less than the size of the collection. ähnelt.
        /// </summary>
        internal static string ArgumentOutOfRange_Index {
            get {
                return ResourceManager.GetString("ArgumentOutOfRange_Index", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Index must be within the bounds of the List. ähnelt.
        /// </summary>
        internal static string ArgumentOutOfRange_ListInsert {
            get {
                return ResourceManager.GetString("ArgumentOutOfRange_ListInsert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Non-negative number required. ähnelt.
        /// </summary>
        internal static string ArgumentOutOfRange_NeedNonNegNum {
            get {
                return ResourceManager.GetString("ArgumentOutOfRange_NeedNonNegNum", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Non-negative number required. ähnelt.
        /// </summary>
        internal static string ArgumentOutOfRange_NeedNonNegNumRequired {
            get {
                return ResourceManager.GetString("ArgumentOutOfRange_NeedNonNegNumRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die capacity was less than the current size. ähnelt.
        /// </summary>
        internal static string ArgumentOutOfRange_SmallCapacity {
            get {
                return ResourceManager.GetString("ArgumentOutOfRange_SmallCapacity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Destination array is not long enough to copy all the items in the collection. Check array index and length. ähnelt.
        /// </summary>
        internal static string CopyTo_ArgumentsTooSmall {
            get {
                return ResourceManager.GetString("CopyTo_ArgumentsTooSmall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The specified TValueCollection creates collections that have IsReadOnly set to true by default. TValueCollection must be a mutable ICollection. ähnelt.
        /// </summary>
        internal static string Create_TValueCollectionReadOnly {
            get {
                return ResourceManager.GetString("Create_TValueCollectionReadOnly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The LinkedList node does not belong to current LinkedList. ähnelt.
        /// </summary>
        internal static string ExternalLinkedListNode {
            get {
                return ResourceManager.GetString("ExternalLinkedListNode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Index {0} is out of range. ähnelt.
        /// </summary>
        internal static string IndexOutOfRange {
            get {
                return ResourceManager.GetString("IndexOutOfRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Target array type is not compatible with the type of items in the collection. ähnelt.
        /// </summary>
        internal static string Invalid_Array_Type {
            get {
                return ResourceManager.GetString("Invalid_Array_Type", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Queue empty. ähnelt.
        /// </summary>
        internal static string InvalidOperation_EmptyQueue {
            get {
                return ResourceManager.GetString("InvalidOperation_EmptyQueue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Stack empty. ähnelt.
        /// </summary>
        internal static string InvalidOperation_EmptyStack {
            get {
                return ResourceManager.GetString("InvalidOperation_EmptyStack", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Enumeration already finished. ähnelt.
        /// </summary>
        internal static string InvalidOperation_EnumEnded {
            get {
                return ResourceManager.GetString("InvalidOperation_EnumEnded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Collection was modified; enumeration operation may not execute. ähnelt.
        /// </summary>
        internal static string InvalidOperation_EnumFailedVersion {
            get {
                return ResourceManager.GetString("InvalidOperation_EnumFailedVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Enumeration has not started. Call MoveNext. ähnelt.
        /// </summary>
        internal static string InvalidOperation_EnumNotStarted {
            get {
                return ResourceManager.GetString("InvalidOperation_EnumNotStarted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Enumeration has either not started or has already finished. ähnelt.
        /// </summary>
        internal static string InvalidOperation_EnumOpCantHappen {
            get {
                return ResourceManager.GetString("InvalidOperation_EnumOpCantHappen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The LinkedList is empty. ähnelt.
        /// </summary>
        internal static string LinkedListEmpty {
            get {
                return ResourceManager.GetString("LinkedListEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The LinkedList node already belongs to a LinkedList. ähnelt.
        /// </summary>
        internal static string LinkedListNodeIsAttached {
            get {
                return ResourceManager.GetString("LinkedListNodeIsAttached", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Mutating a key collection derived from a dictionary is not allowed. ähnelt.
        /// </summary>
        internal static string NotSupported_KeyCollectionSet {
            get {
                return ResourceManager.GetString("NotSupported_KeyCollectionSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die This operation is not supported on SortedList nested types because they require modifying the original SortedList. ähnelt.
        /// </summary>
        internal static string NotSupported_SortedListNestedWrite {
            get {
                return ResourceManager.GetString("NotSupported_SortedListNestedWrite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Mutating a value collection derived from a dictionary is not allowed. ähnelt.
        /// </summary>
        internal static string NotSupported_ValueCollectionSet {
            get {
                return ResourceManager.GetString("NotSupported_ValueCollectionSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The collection is read-only ähnelt.
        /// </summary>
        internal static string ReadOnly_Modification {
            get {
                return ResourceManager.GetString("ReadOnly_Modification", resourceCulture);
            }
        }
    }
}
